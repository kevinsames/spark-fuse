name: Seed Roadmap Issues

on:
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create labels, milestones, and issues from JSON
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;

            function readJson(p) {
              return JSON.parse(fs.readFileSync(p, 'utf8'));
            }

            const labelsDef = readJson('.github/roadmap_labels.json');
            const issuesDef = readJson('.github/roadmap_issues.json');

            // Ensure labels exist
            const existingLabels = await github.paginate(github.rest.issues.listLabelsForRepo, { owner, repo, per_page: 100 });
            const existingLabelNames = new Set(existingLabels.map(l => l.name));
            for (const lbl of labelsDef) {
              if (!existingLabelNames.has(lbl.name)) {
                core.info(`Creating label: ${lbl.name}`);
                await github.rest.issues.createLabel({ owner, repo, name: lbl.name, color: lbl.color, description: lbl.description });
              }
            }

            // Ensure milestones exist (collect titles from issues list)
            const milestoneTitles = Array.from(new Set(issuesDef.map(i => i.milestone)));
            const existingMilestones = await github.paginate(github.rest.issues.listMilestones, { owner, repo, state: 'all', per_page: 100 });
            const milestoneByTitle = new Map(existingMilestones.map(m => [m.title, m]));
            for (const title of milestoneTitles) {
              if (!title) continue;
              if (!milestoneByTitle.has(title)) {
                core.info(`Creating milestone: ${title}`);
                const { data } = await github.rest.issues.createMilestone({ owner, repo, title });
                milestoneByTitle.set(title, data);
              }
            }

            // Fetch existing issues (all states) to avoid duplicates by title
            const existingIssues = await github.paginate(github.rest.issues.listForRepo, { owner, repo, state: 'all', per_page: 100 });
            const existingByTitle = new Map(existingIssues.map(i => [i.title, i]));

            for (const def of issuesDef) {
              if (existingByTitle.has(def.title)) {
                core.info(`Skipping existing issue: ${def.title}`);
                continue;
              }
              let body = def.body || '';
              if (def.body_path) {
                body = fs.readFileSync(def.body_path, 'utf8');
              }
              const milestoneNumber = def.milestone && milestoneByTitle.get(def.milestone) ? milestoneByTitle.get(def.milestone).number : undefined;
              core.info(`Creating issue: ${def.title}`);
              await github.rest.issues.create({
                owner,
                repo,
                title: def.title,
                body,
                labels: def.labels,
                milestone: milestoneNumber
              });
            }
